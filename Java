import java.io.*;
import java.nio.file.*;
import java.security.MessageDigest;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Scanner;

public class PersonalDiary {
    private static final String USERS_DB = "users.txt";
    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) {
        System.out.println("Welcome to Personal Diary");

        while (true) {
            System.out.println("\n1. Register\n2. Login\n3. Exit");
            System.out.print("Choose an option: ");
            String choice = scanner.nextLine();

            switch (choice) {
                case "1":
                    register();
                    break;
                case "2":
                    String user = login();
                    if (user != null) {
                        userMenu(user);
                    }
                    break;
                case "3":
                    System.out.println("Goodbye.");
                    return;
                default:
                    System.out.println("Invalid option.");
            }
        }
    }

    private static void register() {
        System.out.println("\n--- Register ---");
        System.out.print("Choose a username: ");
        String username = scanner.nextLine();

        if (userExists(username)) {
            System.out.println("Username already exists.");
            return;
        }

        System.out.print("Choose a password: ");
        String password = scanner.nextLine();
        String hashed = hashPassword(password);

        try (FileWriter writer = new FileWriter(USERS_DB, true)) {
            writer.write(username + "," + hashed + "\n");
            System.out.println("Registration successful.");
        } catch (IOException e) {
            System.out.println("Error writing to users file.");
        }
    }

    private static String login() {
        System.out.println("\n--- Login ---");
        System.out.print("Username: ");
        String username = scanner.nextLine();
        System.out.print("Password: ");
        String password = scanner.nextLine();
        String hashed = hashPassword(password);

        try (BufferedReader reader = new BufferedReader(new FileReader(USERS_DB))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length == 2 && parts[0].equals(username) && parts[1].equals(hashed)) {
                    System.out.println("Login successful.");
                    return username;
                }
            }
        } catch (IOException e) {
            System.out.println("Error reading users file.");
        }

        System.out.println("Login failed.");
        return null;
    }

    private static void userMenu(String username) {
        while (true) {
            System.out.println("\n1. Write Entry\n2. View Entries\n3. Logout");
            System.out.print("Choose an action: ");
            String action = scanner.nextLine();

            switch (action) {
                case "1":
                    writeEntry(username);
                    break;
                case "2":
                    viewEntries(username);
                    break;
                case "3":
                    System.out.println("Logged out.");
                    return;
                default:
                    System.out.println("Invalid choice.");
            }
        }
    }

    private static void writeEntry(String username) {
        System.out.println("\n--- Write Diary Entry ---");
        System.out.print("Write your thoughts:\n");
        String entry = scanner.nextLine();
        String now = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss"));
        String filename = username + "_diary.txt";

        try (FileWriter writer = new FileWriter(filename, true)) {
            writer.write("[" + now + "]\n" + entry + "\n\n");
            System.out.println("Entry saved.");
        } catch (IOException e) {
            System.out.println("Error saving entry.");
        }
    }

    private static void viewEntries(String username) {
        String filename = username + "_diary.txt";
        System.out.println("\n--- Your Diary Entries ---");

        try {
            if (Files.exists(Paths.get(filename))) {
                Files.lines(Paths.get(filename)).forEach(System.out::println);
            } else {
                System.out.println("No entries found.");
            }
        } catch (IOException e) {
            System.out.println("Error reading diary file.");
        }
    }

    private static boolean userExists(String username) {
        try (BufferedReader reader = new BufferedReader(new FileReader(USERS_DB))) {
            String line;
            while ((line = reader.readLine()) != null) {
                if (line.startsWith(username + ",")) {
                    return true;
                }
            }
        } catch (IOException e) {
            // If file doesn't exist, assume user doesn't exist
        }
        return false;
    }

    private static String hashPassword(String password) {
        try {
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            byte[] hashedBytes = md.digest(password.getBytes());
            StringBuilder sb = new StringBuilder();

            for (byte b : hashedBytes) {
                sb.append(String.format("%02x", b));
            }

            return sb.toString();
        } catch (Exception e) {
            throw new RuntimeException("Error hashing password.");
        }
    }
}